{"mappings":"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","sources":["src/table/index.ts","src/table/table.ts","<<jsx-config-pragma.js>>","src/table/libs/index.ts","src/table/libs/get-codes-sort.ts","src/table/libs/get-count-children.ts","src/table/libs/get-count-columns.ts","src/table/libs/get-max-count-children.ts","src/table/libs/get-thead-config.ts","src/table/libs/get-color-columns.ts"],"sourcesContent":["export {Table as default} from './table';\n","import './style.scss'\nimport { debounce } from 'lodash';\nimport type { TData, TTheadData, TTable } from './type'\nimport {\n    getCountColumns,\n    getMaxCountChildren,\n    getTheadConfig,\n    getCountChildren,\n    getCodesSort,\n    getColorColumns,\n} from './libs'\n\nconst COLOR_CLASSES = ['green', 'blue', 'red', 'yellow', 'orange']\n\n\nexport class Table {\n    maxLevelColumns: number;\n    maxLevelData: number;\n    countColumns: number;\n    colorColumns: Record<number, TData['color']>;\n    table: HTMLTableElement;\n    thead: HTMLTableSectionElement;\n    tbody: HTMLTableSectionElement;\n    theadData: TTheadData;\n    root: HTMLElement;\n    codes: string[];\n    data: TData[];\n\n    initialArgs: TTable\n\n    constructor(args: TTable) {\n\n        this.initialArgs = args;\n        this.init();\n\n        this.updateResize();\n    }\n\n    updateResize() {\n        window.addEventListener('resize', debounce(() => this.init(), 300));\n    }\n\n    init() {\n        const { columns, root, maxHeight, fullHeight, data, headerColor } = this.initialArgs;\n\n        this.root = root;\n        this.data = data;\n        this.maxLevelColumns = getMaxCountChildren(columns);\n        this.maxLevelData = getMaxCountChildren(this.data, 1);\n        this.theadData = getTheadConfig(columns, this.maxLevelColumns);\n        this.countColumns = getCountColumns(this.theadData);\n        this.codes = getCodesSort(columns);\n        this.colorColumns = getColorColumns(columns);\n\n        this.createTable(maxHeight, fullHeight);\n\n        setTimeout(() => {\n            this.renderThead(headerColor);\n        }, 10)\n        setTimeout(() => {\n            this.renderTbody();\n        }, 20)\n\n        setTimeout(() => {\n            this.fixedColumns();\n        }, 200)\n    }\n\n    createTable(maxHeight: number = 600, fullHeight: boolean) {\n        this.table = document.createElement('table');\n        this.table.setAttribute('cellspacing', '0');\n        this.table.setAttribute('class', 'big-table');\n        const wrap = document.createElement('div');\n         wrap.classList.add('big-table-wrap');\n        this.root.classList.add('big-table-wrap__border');\n        this.root.innerHTML = '';\n\n        if (fullHeight) {\n            const top = this.root.getBoundingClientRect()?.top;\n            this.root.style.maxHeight = `${window.innerHeight - top}px`;\n            wrap.style.maxHeight = `${window.innerHeight - top}px`;\n\n        } else {\n            this.root.style.maxHeight = `${maxHeight}px`;\n            wrap.style.maxHeight = `${maxHeight}px`;\n        }\n        wrap.appendChild(this.table);\n        this.root.appendChild(wrap);\n    }\n\n    renderThead(headerColor: TData['color']) {\n        this.thead = document.createElement('thead');\n\n        this.setColor(this.thead, headerColor);\n\n        this.theadData.forEach((columns) => {\n            const tr = document.createElement('tr');\n            let countColumn = 0;\n            columns.forEach(({ title, colspan, rowspan, color, className }) => {\n                const td = document.createElement('td');\n                td.innerHTML = title;\n                this.setColor(td, color);\n\n                if (className && className.length) {\n                    className.forEach((ch) => {\n                        td.classList.add(ch)\n                    })\n                }\n\n                countColumn += colspan || 1;\n                // if (countColumn === this.countColumns) {\n                //     td.classList.add('no-border')\n                // }\n\n                if (colspan) {\n                    td.setAttribute('colspan', colspan.toString())\n                }\n\n                if (rowspan) {\n                    td.setAttribute('rowspan', rowspan.toString())\n                }\n\n                tr.appendChild(td);\n            })\n            this.thead.appendChild(tr);\n        });\n\n        this.table.appendChild(this.thead);\n    }\n\n    renderTbody() {\n        this.tbody = document.createElement('tbody');\n        this.renderTbodyRow(this.data);\n        this.table.appendChild(this.tbody);\n    }\n\n    renderTbodyRow(\n        data: TData[],\n        curColumn = 0,\n        prevTr?: HTMLTableRowElement,\n        numberCell = 0,\n        parentCells: HTMLTableCellElement[] = [],\n    ) {\n        data.forEach((item, index) => {\n            const { title, children, values, color, bold, align = 'left', className } = item;\n            const tr = prevTr && index === 0 ? prevTr : document.createElement('tr');\n            this.handlersRows(tr, parentCells);\n\n            if (bold) {\n                tr.classList.add('bold')\n            }\n\n            if (className) {\n                tr.classList.add(className)\n            }\n\n            this.setColor(tr, color)\n\n            const td = document.createElement('td');\n            this.setColor(td, color || this.colorColumns[numberCell]);\n            td.innerHTML = title;\n            td.classList.add(`align-${align}`);\n\n            if (children) {\n                td.setAttribute('rowspan', getCountChildren(children).toString());\n                tr.appendChild(td);\n\n                if (!prevTr || index > 0) {\n                    this.tbody.appendChild(tr);\n                }\n\n                this.renderTbodyRow(children.map(item => ({\n                    ...item,\n                    color: color || item.color,\n                    bold: bold || item.bold,\n                })), curColumn + 1, tr, numberCell + 1, [...parentCells, td]);\n            } else if (values) {\n                const tail = this.maxLevelData - curColumn;\n\n                td.setAttribute('colspan', (tail).toString());\n                if (title) {\n                    tr.appendChild(td);\n                }\n\n                this.renderValues(tr, values, color);\n\n                this.tbody.appendChild(tr);\n            } else {\n                this.renderRowDivider(tr, item, curColumn);\n            }\n        })\n    }\n\n    renderRowDivider(tr: HTMLTableRowElement, item: TData, curColumn: number) {\n        const { sticky = true, color, title, align, bold } = item\n        const tail = this.countColumns - curColumn;\n\n        const td = document.createElement('td');\n        td.setAttribute('colspan', (tail).toString());\n        td.classList.add('row-divider');\n        td.style.top = `${this.thead.offsetHeight}px`;\n        if (!sticky) {\n            td.classList.add('row-divider_no-sticky');\n        }\n\n        if (align) {\n            td.classList.add(`align-${align}`);\n        }\n        this.setColor(td, color)\n\n        const wrap = document.createElement('div');\n        wrap.innerHTML = title;\n        wrap.style.width = `${this.root.offsetWidth - 30}px`;\n        wrap.style.left = `5px`;\n        wrap.setAttribute('class', 'sticky-row-wrap')\n        td.appendChild(wrap)\n        tr.appendChild(td);\n\n        this.tbody.appendChild(tr);\n    }\n\n    setColor(el: HTMLElement, color: TData['color']) {\n        if (color) {\n            if (COLOR_CLASSES.indexOf(color) >= 0) {\n                el.classList.add(color);\n            } else {\n                el.style.backgroundColor = color\n            }\n        }\n    }\n\n    renderValues(tr: HTMLTableRowElement, values: TData['values'], colorRow: TData['color']) {\n        this.codes.forEach((code, index) => {\n            const td = document.createElement('td');\n\n            const className = `data-code-${code}`;\n            td.classList.add(className);\n            this.handlersColumns(td, className);\n            this.setColor(td, colorRow || this.colorColumns[this.maxLevelData + index]);\n            const value = values[code];\n            if (Array.isArray(value)) {\n                const subTable = document.createElement('table');\n                const subTbody = document.createElement('tbody');\n                value.forEach((val) => {\n                    const subTr = document.createElement('tr');\n                    const subTd = document.createElement('td');\n                    subTd.innerHTML = val.toString();\n\n                    subTr.appendChild(subTd);\n                    subTbody.appendChild(subTr);\n                });\n                td.classList.add('with-sub-table')\n\n                subTable.appendChild(subTbody);\n                td.appendChild(subTable);\n            } else if (value) {\n                td.innerHTML = value.toString();\n            }\n            tr.appendChild(td);\n        })\n    }\n\n    fixedColumns() {\n        const thead: HTMLTableRowElement[] = Array.prototype.slice.call(this.thead.children);\n        this.fixedColumnsRows(thead);\n        const tbody: HTMLTableRowElement[] = Array.prototype.slice.call(this.tbody.children);\n        this.fixedColumnsRows(tbody);\n    }\n\n    fixedColumnsRows(rows: HTMLTableRowElement[]) {\n\n        let offsetLeft: [number, number][] = []\n\n        rows.forEach((tr, index) => {\n            const columns: HTMLTableCellElement[] = Array.prototype.slice.call(tr.children);\n\n            if (columns.length > 1) {\n                offsetLeft = offsetLeft.filter((item) => item[0] > index);\n                const countTopRow = offsetLeft.length;\n\n                let curLeft = offsetLeft.reduce((acc, [i, left]) => acc + left, 0);\n\n                for (let i = 0; i < this.maxLevelData - countTopRow; i++) {\n                    const cell = columns[i];\n                    const cellWidth = cell.offsetWidth;\n                    const cellColspan = Number(cell.getAttribute('colspan'));\n                    cell.classList.add('fixed-column')\n                    cell.style.left = `${curLeft}px`;\n                    curLeft += cell.offsetWidth;\n\n                    if (cellColspan) {\n                        i += cellColspan;\n                    }\n\n                    // -1 не учитываем текущую строку\n                    const cellRowspan = Number(cell.getAttribute('rowspan'));\n                    if (cellRowspan > 1) {\n                        offsetLeft.push([index + cellRowspan, cellWidth]);\n                    }\n                }\n            }\n        })\n    }\n\n    handlersRows(tr: HTMLTableRowElement, elements: HTMLTableCellElement[]) {\n        tr.addEventListener('mouseenter', () => {\n            elements.forEach(el => {\n                el.classList.add('hovered')\n            })\n        })\n        tr.addEventListener('mouseleave', () => {\n            elements.forEach(el => {\n                el.classList.remove('hovered')\n            })\n        })\n    }\n\n    handlersColumns(td: HTMLTableCellElement, className: string) {\n        td.addEventListener('mouseenter', () => {\n            const cells = document.getElementsByClassName(className);\n\n            Array.prototype.slice.call(cells).forEach((el) => {\n                el.classList.add('hovered');\n            })\n        })\n        td.addEventListener('mouseleave', () => {\n            const cells = document.getElementsByClassName(className);\n\n            Array.prototype.slice.call(cells).forEach((el) => {\n                el.classList.remove('hovered');\n            })\n        })\n    }\n}\n\n",null,"export { getCodesSort } from './get-codes-sort'\nexport { getCountChildren } from './get-count-children';\nexport { getCountColumns } from './get-count-columns';\nexport { getMaxCountChildren } from './get-max-count-children';\nexport { getTheadConfig } from './get-thead-config';\nexport { getColorColumns } from './get-color-columns'","import type { TColumn } from '../type'\n\nexport function getCodesSort(columns: TColumn[], codes = []) {\n    columns.forEach(({children, code}) => {\n        if (code) {\n            codes.push(code);\n        }\n        if (children) {\n            getCodesSort(children, codes)\n        }\n    })\n\n    return codes;\n}","import type { TData } from '../type'\n\nexport function getCountChildren(rows:TData[]){\n    return rows.reduce((acc, {children}) => children ? acc + getCountChildren(children) : acc + 1, 0)\n}","import type { TTheadData } from '../type'\n\nexport function getCountColumns(theadData: TTheadData) {\n    return theadData[0].reduce((acc, item) => item.colspan ? item.colspan + acc : acc + 1, 0);\n}","type TData = {\n    children?: TData[];\n    title?: string;\n    [key: string]: unknown;\n}\n\nexport function getMaxCountChildren(columns: TData[], level = 0){\n    const levels = columns.map(({children, title}) =>  {\n        if (!title) {\n            return level - 1;\n        }\n        return children && title ? getMaxCountChildren(children, level + 1) : level\n    });\n    return Math.max(...levels);\n}","import type { TColumn, TTheadData, THeadCell } from '../type';\n\nexport function getTheadConfig(columns: TColumn[], maxLevel, level = 0, rows: TTheadData = []){\n    const row: THeadCell[] = [];\n    let childRows = [];\n\n    columns.forEach(({title, children, color, className: ch, code}) => {\n        const className: string[] = []\n        if (ch) {\n            className.push(ch)\n        }\n        if (code) {\n            className.push(`data-code-${code}`)\n        }\n\n        if (children) {\n            const childrenClassNames =  getChildrenClassNamesCodes(children);\n\n            row.push({\n                title,\n                color,\n                className: [...className, ...childrenClassNames],\n                colspan: getCountChildren(children),\n            })\n            childRows = [...childRows, ...children.map((item) => ({...item, color: item.color || color}))];\n        } else {\n            const cell: THeadCell = {title, color, className};\n            if (maxLevel - level > 0) {\n                cell.rowspan = maxLevel - level + 1;\n            }\n            row.push(cell);\n        }\n    });\n    rows.push(row);\n\n    if (childRows.length) {\n        getTheadConfig(childRows, maxLevel, level + 1, rows);\n    }\n\n    return rows;\n}\n\nfunction getCountChildren(items: TColumn[]){\n    let count = items.length;\n\n    items.forEach(({ children }) => {\n        if (children) {\n            count--;\n            count += getCountChildren(children);\n        }\n    });\n\n    return count;\n}\n\nfunction getChildrenClassNamesCodes(items: TColumn[]){\n    let className = [];\n\n    items.forEach(({ children, code }) => {\n        if (code) {\n            className.push(`data-code-${code}`)\n        }\n        if (children) {\n            const childrenClassNames =  getChildrenClassNamesCodes(children);\n\n            className = [...className, ...childrenClassNames];\n        }\n    });\n\n    return className;\n}","import type { TColumn } from '../type'\nimport { getCountChildren } from './get-count-children'\n\nexport function getColorColumns(\n    columns: TColumn[],\n    colorColumns: Record<number, TColumn['color']> = {},\n    globalIndex = 0,\n    parentColor?: TColumn['color']\n) {\n\n    let localIndex = globalIndex;\n\n    columns.forEach(({color, children}) => {\n        if ((color || parentColor) && !children) {\n            colorColumns[localIndex] = color || parentColor;\n        }\n\n        if (children) {\n            getColorColumns(children, colorColumns, localIndex, color || parentColor);\n\n            localIndex += getCountChildren(children);\n        } else {\n            localIndex++\n        }\n    })\n\n    return colorColumns;\n}"],"names":[],"version":3,"file":"main.js.map"}